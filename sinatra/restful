RESTful routes:

-In this lesson we'll explain the benefits of RESTful routes and how to provide a design pattern that allows for easy data manipulation.
-What is it? The internet would be a really confusing place without a convention for how to handle URLS - to delete a FB post might be the url/delete-this-post, but Twitter might be remove instead. Without a specific convention to follow, it would be hard to create new content, edit, delete it. RESTful routes provide a design pattern that allows for easy data manipulation. It's nicer for users and nicer for developers to have everything consistent. A RESTful route is a route that provides mapping between HTP verbs like get, post to controller CRUD actions like read, update. Instead of relying solely on the URL to indicate what site to visit, a RESTful route also depends on the HTTP verb AND the URL. What this means is that when your application receives an HTTP request, it ontrospects on that request and identifies the HTTP method and URL, connects that with a corresponding controller action that has that method and URL, executes the code in that action, and determines which response gets sent back to the client. We don't need to worry about how the mechanics of the pattern matching occurs, just that it happens.
-It's important to note that much o the CRUD actions are different actions that occur in the same resource. Let's take the example of a blog post with the ID 4. If we watnted to view that post, we would make a GET request to /posts/4. But what about when I want to update that post? Am I hitting a different resource? Nope! Just doing a different action to that same resource. So instead of a GET againt /posts/4 we do a PUT. That's why separating what you're talking to fro the action you're doing is important.
-Browser Caveat
Browswers behave a little strangfe as it relates to PUT, Patch and delete rewuests, in that they don't know how to send those requests. "Forms that delete and edit need to be submitted via POST requests."
-Routes Overview
Blog website example. You'd want to have a controller action to create a new post(new route), to display one post(show route), to display all(index route), to delete a post(delete route), and a page to edit a post(edit route).
GET-'/posts'-index action-index page to display all posts.
GET-'/posts/:id'-show action-displays one post based on ID in URL.
PATCH-'/posts/:id/edit'-edit action-edits one post based on ID.
DELETE-'/posts/:id/delete'-delete action-deletes one post based on ID.
POST-'/posts'-create action-create one post
INDEX ACTION
get '/posts' do
  @posts = Post.all
  erb :index
  -this shows all the posts-
NEW ACTION
get '/posts/new' do
  erb: new
post '/posts' do
  @post = Post.create(:title => params[:title], :content => params[:content])
  redirect '/posts/#{@post.id}'
  -the first gets a form filled out and creates a new post based on params, saves it, and goes to the show page-
SHOW ACTION
get '/posts/:id' do
  @post = Post.find_by_id(params[:id])
  erb :show
EDIT ACTION
get '/posts/:id/edit' do
  @post = Post.find_by_id(params[:id])
  erb :edit
patcj '/posts/:id' do
  @post = Post.find_by_id(params[:id])
  @post.title = params[:title]
  @post.content = params[:content]
  @post.save
  redirect '/posts/#{@post.id}'
-first loads edit form in the browser with a get request to edit route. Then it submits it. It pulls the post by ID from URL, update the info and save. ENsd with a redirect to show page.
-You'll need to include a hidden input field in the form for patch <form action="/posts/<%=@post.id%>" method="post"><input id="hidden" type="hidden" name="_method" value="patch"><input type="text" name="title"><input type="test" name="content"><input type="submit" value=-"submit"></form>
The hidden input uses "use Rack::MethidOverride" which is Sinatra middleware. Must mount it in config.ru ABOVE run ApplicationController!Put it above all controllers. It uses _method and pits in whatever the value attribute is set to.
The delete form will also be hidden. just like the last, but the last value after submit will be delete in the form.
