#validates is an ActiveRecord::Base method we can use to keep bad data away.
it's a special method call that goes to the top of the model class definitions and prevent them form being saved to the database if the data doesn't look right. they have the job of protecting the database from invalid code. SQLite has data validation features tha check things like length and data type. In Rails, these are NOT used because each database works a little differently.
Invalid Data- suppose you get a new phone and ask all your friends for their numbers. One of them tells you 555-806-482. it could be valid or something else nit not our phone numbers here.

You can google AR validations.
#validates is our swiss army knofe for validations. it takes two arguments: the name of the attribute we want to validate, and a hash of options that include details of how to validate it.
validates :name, presence: true will not be saved if the name is empty.

Remember that #new instantiates a new AR model without saving it to the database whereas #create attempts to save it (like new and save). An AR model instantiated with #new won't be validated because no attempt to write to the database was made. Validations run with save or create. You CAN hit validations without touching the database by using #valid? method. all methods listed in sec 4 of AR val.

when a record fails validation (you can see in return values) it will return as false. if you add ! at the end of a method call it will raise an exception.

To find out why validations fail you can look at #errors objects. errors.messages (like p = Person.new, p.errors.messages (empty), p.valid? (false), p.errors..messages (name: can't be blank))

you can check one attribute at a time by passing the name to errors as a key
person.errors[:name]

displaying validations errors in views (see sec 8) if @article.errors.any?
div id="error_explanation"...
length is a more clear one
validates :name, length: {minimum: 2}
you can use "in:" for a range, like for password length.

validates :email, uniqueness: true
no duplication

you can use #validate when you're not sur which to use. If you need the same logic somehwere else you can use the saved instance variable that goes with it and use #validates on that.

#validate for quick custon validations that you can extract later.
#EachValidator and #validates for validating one specific attribute.
@Validator and #validates_with for doing many validations in one pass.

Validators in Controller Actions:
we're going to change the way #create looks. if we create a post and the post is invalid, it won't redirect to the show page and will instead give a 404 error and lose all the feedback from validations. All of the variables set when the page loads will disappear, throwing out everything after each request except for cookies(login, sessions).

def create
@post = Post.new(post_params)
if @post.valid?
@post.save
redirect to post_path(@post)
else
render :new

this way we don't lose the instance of @post.

Validations with the form-tag:
1. user fills out form and hits submit and it goes to a post request. 2. controller sees that validations have fails and re-renders the form. 3. view displays the errors.
step 3 is client side of validations.
how to pre-fill forms with user's input so they don't have to type everything: form_tag and form_for
form_tag:
<%= form_tag("/people") do %> ... this is the action and method
  Name: <%= text_field_tag "name", @person.name (this adds the value being passed in)%> input types with id
  <%= submit_tag "Create Person" %> <% end %> name and value
  in model:
class Person
  validates :name, format: {without: /[0-9]/, message: "does not allow numbers"}
  validates :email, uniqueness: true
our #create:
  def create
  @person = Person.new(person_params)
  if @person.valid?
  @person.save
  redirect_to person_path(@person)
  else
  render :new
As per lesson: when the browser renders those inputs They'll be pre-filled forms because @person= Person.new will create an empty model object whose attributes are all nil.

Displaying errors with errors.full_messages:
when a model fails validation, its errors attribute is filled with information about what went wrong. Rails creates an ActiveModel::Errors object to carry this info.
The simplest way to show errors is to just spit them all out at the top of the form by iterating over @person.errors. full_messages. But first we'll have to check whether there are errors to display with @person.errors.any?
<% if @person.errors.any? %>
  <div id="error_explanation">
  <h2>There were some errors:</h2>
  <ul><%@person.errors.full_messages.each do |message| %>
  <li><%= message %></li>
  <% end %></ul></div><% end %>
  each error will show up as a list item if you inspect it.
  note that |message| is iterating over full_messages and will list all error messages that it creates.
  All together with everything simplified and cleaned up:

  <%= form_tag("/people") do %>
    <% if @person.errors.any? %>
    <div id="error_explanation">
      <h2>There were some errors:</h2>
      <ul>
      <% @person.errors.full_messages.each do |m| %>
        <li><%= m %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="<%='field_with_errors' if                    @person.errors[:name].any? %>">
    <%= label_tag "name", @person.name %>
  </div>

  <div clas="<%= 'field_with_errors' if @person.errors[:email].any? %>">
    <%= label_tag "email", "Email" %>
    <%= text_field_tag "email", @person.email %>
  </div>
  <%= submit_tag "Create" %>
  <% end %>

validations with form_for:
<% form_for @post do |f| %>
<%= f.text_field :title %>
<%= f.text_area :content %>
<%= f.submit %>
<% end %>

form-tag doesn't know what action we're going to use because it has no model object to check. form)for knows that an empty, unsaved model object needs a "new" form and a populated object needs an "edit" form.
  create blank object:
  def new
    @post = Post.new
  def create
    @post = Post.create(post_params)

    the text_field creates a div tag with field_with_errors if there are any failed validations.
  if there's an html issue it's because an <input> within a <div> can get messed up.

  inspect with option command u or i

  Delete Forms:
  Problems here. rails doesn't use the right method to delete.
    def destroy
    Person.find(params[:id]).destroy
    redirect_to people_url

  you can also delete from a list in index view:
  <% @people.each do |person| %>
<div class="person">
  <span><%= person.name %></span>
  <%= link_to "Delete", person, method: :delete, data: { confirm: "Really?" } %>
</div>
<% end %>
<a data-method> will submit a delete request as if a form had been submitted. It will use "get" if no javascript used.
data-confirm pops up a confimation window before the link allowing the user to make sure they're ready to delete.
